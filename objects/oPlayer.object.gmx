<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerDown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite List
//Horizontal
spriteLeft = sPlayerLeft
spriteRight = sPlayerRight
//Vertical
spriteUp = sPlayerUp
spriteDown = sPlayerDown
//Diagonal
spriteUpLeft = sPlayerUpLeft
spriteUpRight = sPlayerUpRight
spriteDownLeft = sPlayerDownLeft
spriteDownRight = sPlayerDownRight
//Knockback
spriteFlash = sPlayerDown
spritePrevious = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Variables
yDir = 0 
xDir = 0;
yScale = 1;
xScale = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement Variables
///Horizontal
xspValue = 4;
xspFloat = 0;
xspPoint = 0;
xsp = 0;
///Vertical
yspValue = 4;
yspFloat = 0;
yspPoint = 0;
ysp = 0;
///Misc.
reverse = 0;
knockback = 0;
knockbackDelay = 10;
canMove = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to previous sprite before knockback
sprite_index = spritePrevious
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End of knockback
canMove = 1;
reverse = 0;
knockback = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Database
//Horizontal
if xDir =-1 &amp;&amp; yDir = 0 {sprite_index = spriteLeft}
if xDir = 1 &amp;&amp; yDir = 0 {sprite_index = spriteRight}
//Vertical
if xDir = 0 &amp;&amp; yDir =-1 {sprite_index = spriteUp}
if xDir = 0 &amp;&amp; yDir = 1 {sprite_index = spriteDown}
//Diagonal
if xDir = 1 &amp;&amp; yDir = 1 {sprite_index = spriteDownRight}
if xDir =-1 &amp;&amp; yDir = 1 {sprite_index = spriteDownLeft}
if xDir = 1 &amp;&amp; yDir =-1 {sprite_index = spriteUpRight}
if xDir =-1 &amp;&amp; yDir =-1 {sprite_index = spriteUpLeft}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Behavior
image_speed =.3
if xDir = 0 &amp;&amp; yDir = 0 {image_index = 0 }
//Knockback sprites
/*if knockback &gt; 0 
{spritePrevious = sprite_index;
sprite_index = spriteFlash}
if knockback = 0 
{if alarm[1]&lt;0{alarm[1]=1}}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement &amp; Behavior
xspPoint = 0; //The wanted horizontal speed for this step
yspPoint = 0; //The wanted vertical speed for this step

if canMove = 1 {
    if (oGC.keyLeft) {
        xDir = -1;
        yDir = 0;
    }
    else if (oGC.keyRight) {
        xDir = 1;
        yDir = 0;
    }
    else if (oGC.keyUp) {
        xDir = 0;
        yDir = -1;
    }
    else if (oGC.keyDown) {
        xDir = 0;
        yDir = 1;
    }
    if (oGC.keyLeft) &amp;&amp; (oGC.keyUp) {
        xDir = -1;
        yDir = -1;
    }
    if (oGC.keyRight) &amp;&amp; (oGC.keyUp) {
        xDir = 1;
        yDir = -1;
    }
    if (oGC.keyLeft) &amp;&amp; (oGC.keyDown) {
        xDir = -1;
        yDir = 1;
    }
    if (oGC.keyRight) &amp;&amp; (oGC.keyDown) {
        xDir = 1;
        yDir = 1;
    }
    if (oGC.noKey) {
        xDir = 0;
        yDir = 0;
    }
}
if (!reverse) {
    xspPoint += (xspValue * sign(xDir))
    yspPoint += (yspValue * sign(yDir))
}

if (reverse) {
    xspPoint -= (4 * sign(xDir))
    yspPoint -= (4 * sign(yDir))
}

//Horizontal collision
xspFloat += (xspPoint - xspFloat) * 0.1; //Smoothly accelerate / decelerate to the wanted speed.
xsp = round(xspFloat); //Turn the theoretical value into an integer for collision and movement
var objCol = oSolid
if (place_meeting(x + xsp, y, objCol)) {
    while (!place_meeting(x + sign(xsp), y, objCol)) {
        x += sign(xsp)
    }
    if knockback = 0 {
        knockback = 1
    }
    xsp = 0;
    xspFloat = 0; //We still have to set the theoretical value to 0 here
}

x += xsp;

//Vertical collision
yspFloat += (yspPoint - yspFloat) * 0.1; //Smoothly accelerate / decelerate to the wanted speed.
ysp = round(yspFloat); //Turn the theoretical value into an integer for collision and movement
if (place_meeting(x, y + ysp, objCol)) {
    while (!place_meeting(x, y + sign(ysp), objCol)) {
        y += sign(ysp)
    }
    if knockback = 0 {
        knockback = 1
    }
    ysp = 0;
    yspFloat = 0; //We still have to set the theoretical value to 0 here
}
y += ysp;



///Change direction
var moving = (point_distance(0, 0, sign(xspPoint), sign(yspPoint)) &gt; 0);
if (moving) &amp;&amp; (!reverse) {
    previousAngle = point_direction(0, 0, sign(xspPoint), sign(yspPoint));
}

//Knockback
if knockback = 1 {
    if alarm[0] &lt; 0 {
        alarm[0] = knockbackDelay;
    }
    reverse = 1;
    canMove = 0;
}

if knockback = 2 {
    if alarm[0] &lt; 0 {
        alarm[0] = knockbackDelay;
    }
    reverse = 1;
    canMove = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
